(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[339],{4369:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-3087a126",path:"/guide/PHP.html",title:"PHP",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"时间日期",slug:"时间日期",children:[]},{level:2,title:"数字",slug:"数字",children:[]},{level:2,title:"字符串",slug:"字符串",children:[{level:3,title:"生成与转化",slug:"生成与转化",children:[]},{level:3,title:"大小写转换",slug:"大小写转换",children:[]},{level:3,title:"字符串查找替换：",slug:"字符串查找替换",children:[]},{level:3,title:"去空格或其他字符",slug:"去空格或其他字符",children:[]},{level:3,title:"字符串编码",slug:"字符串编码",children:[]}]},{level:2,title:"数组",slug:"数组",children:[{level:3,title:"内部指针",slug:"内部指针",children:[]},{level:3,title:"键/值操作",slug:"键-值操作",children:[]},{level:3,title:"出栈入栈(填充清除)",slug:"出栈入栈-填充清除",children:[]},{level:3,title:"数组去重",slug:"数组去重",children:[]},{level:3,title:"其他",slug:"其他",children:[]}]},{level:2,title:"排序算法",slug:"排序算法",children:[]},{level:2,title:"命令",slug:"命令",children:[{level:3,title:"常用命令行",slug:"常用命令行",children:[]},{level:3,title:"项目启动",slug:"项目启动",children:[]},{level:3,title:"安装",slug:"安装",children:[]}]},{level:2,title:"ThinkPHP",slug:"thinkphp",children:[{level:3,title:"事务",slug:"事务",children:[]}]},{level:2,title:"Laravel",slug:"laravel",children:[{level:3,title:"模型",slug:"模型",children:[]},{level:3,title:"命令",slug:"命令-1",children:[]}]},{level:2,title:"理论",slug:"理论",children:[{level:3,title:"特性",slug:"特性",children:[]},{level:3,title:"引用变量",slug:"引用变量",children:[]},{level:3,title:"常量及数据类型",slug:"常量及数据类型",children:[]},{level:3,title:"运算符",slug:"运算符",children:[]},{level:3,title:"流程控制",slug:"流程控制",children:[]},{level:3,title:"自定义函数和内部函数",slug:"自定义函数和内部函数",children:[]},{level:3,title:"正则表达式",slug:"正则表达式",children:[]},{level:3,title:"文件及目录处理",slug:"文件及目录处理",children:[]},{level:3,title:"会话控制",slug:"会话控制",children:[]},{level:3,title:"面向对象",slug:"面向对象",children:[]},{level:3,title:"网络协议",slug:"网络协议",children:[]},{level:3,title:"开发环境",slug:"开发环境",children:[]}]}],filePathRelative:"guide/PHP.md",git:{updatedTime:163057832e4,contributors:[{name:"Alice",email:"862312883@qq.com",commits:3}]}}},5654:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="php" tabindex="-1"><a class="header-anchor" href="#php" aria-hidden="true">#</a> PHP</h1><h2 id="时间日期" tabindex="-1"><a class="header-anchor" href="#时间日期" aria-hidden="true">#</a> 时间日期</h2><ul><li><code>time()</code> 得到当前时间的时间戳（整型：从格林威治时间 1970 年 1 月 1 日 0 时 0 分 0 秒开始）秒数</li><li><code>date()</code> 时间序列化函数，将指定的时间戳转换成规定时间日期的显示格式（随意的字符串：有专业的格式符规定），如果没有指定时间戳，系统默认使用当前时间的时间戳</li><li><code>strtotime()</code> 时间日期格式的字符串转换成对应的时间戳（只要是正确的英语时间表达方式，都可以进行转换）</li><li><code>mktime()</code> 用于从日期取得时间戳(hour,minute,second,month,day,year,is_dst)</li><li><code>microtime()</code> 返回当前 Unix 时间戳的微秒数</li><li><code>date_diff()</code> 日期相差</li><li><code>date_add()</code> 日期加法</li><li><code>date_sub()</code> 日期减法</li><li><code>date_default_timezone_set()</code> 设置时区</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;-1 day&quot;</span><span class="token punctuation">)</span> <span class="token comment">#昨天</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 day&quot;</span><span class="token punctuation">)</span> <span class="token comment">#明天</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 week&quot;</span><span class="token punctuation">)</span> <span class="token comment">#一周后</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 week 2 days 4 hours 2 seconds&quot;</span><span class="token punctuation">)</span> <span class="token comment">#一周零两天四小时两秒后</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;next Thursday&quot;</span><span class="token punctuation">)</span> <span class="token comment">#下个星期四</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;last Monday&quot;</span><span class="token punctuation">)</span> <span class="token comment">#上个周一</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;last month&quot;</span><span class="token punctuation">)</span> <span class="token comment">#一个月前</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+1 month&quot;</span><span class="token punctuation">)</span> <span class="token comment">#一个月后</span>\n<span class="token function">strtotime</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;+10 year&quot;</span><span class="token punctuation">)</span> <span class="token comment">#十年后</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>microtime：微秒时间戳，根据不同的要求返回不同的结果   混合 microtime (布尔类型 )，可以返回一个浮点数的时间，也可以返回一个数组（时间戳和微秒数）</li></ul><h2 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h2><ul><li>abs(): 求绝对值</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$abs</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 4.2 数字绝对值数字</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>ceil()</code> 进一法取整</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">9.999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 10 浮点数进一取整</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>floor()</code> 舍去法取整</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">9.999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 9 浮点数直接舍去小数部分</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>fmod()</code> 浮点数取余</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">5.7</span><span class="token punctuation">;</span>\n<span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span> // 两个浮点数,x<span class="token operator">&gt;</span>y 浮点余数\n<span class="token variable">$r</span> <span class="token operator">=</span> fmod<span class="token punctuation">(</span><span class="token variable">$x</span>, <span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment"># $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>round()</code> 浮点数四舍五入</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.95583</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment"># 1.96, 一个数值|保留小数点后多少位,默认为0 舍入后的结果</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>sqrt()</code> 求平方根</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment"># 3 被开方的数平方根</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>max()</code> 求最大值</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> max<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">3</span>, <span class="token number">5</span>, <span class="token number">6</span>, <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token number">7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>多个数字或数组 返回其中的最大值</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>min()</code> 求最小值</li></ul><blockquote><p>输入: 多个数字或数组</p></blockquote><blockquote><p>输出: 返回其中的最小值</p></blockquote><ul><li><code>mt_rand()</code> 更好的随机数</li></ul><blockquote><p>输入: 最小|最大, 输出: 随机数随机返回范围内的值</p></blockquote><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p><code>rand()</code> 随机数 输入: 最小|最大, 输出: 随机数随机返回范围内的值</p></li><li><p><code>pi()</code> 获取圆周率值</p></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><h3 id="生成与转化" tabindex="-1"><a class="header-anchor" href="#生成与转化" aria-hidden="true">#</a> 生成与转化</h3><ul><li><code>str_pad()</code> 把字符串填充为指定的长度</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token function">str_pad</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 操作字符串，新长度，填充值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>str_repeat()</code> 重复使用指定字符串</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 要重复的字符串，重复次数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>str_split()</code> 把字符串分割到数组中</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">str_split</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hehe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [0] =&gt; H [1] =&gt; e [2] =&gt; h [3] =&gt; e )</span>\n<span class="token comment"># 要分割的字符串，数组长度</span>\n<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">str_split</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [0] =&gt; Hel [1] =&gt; lo )</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>explode()</code> 使用一个字符串为标志分割另一个字符串</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [0] =&gt; Hello [1] =&gt; world )</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strrev()</code> 反转字符串</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strrev</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># !dlroW olleH</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>number_format()</code> 函数通过千位分组来格式化数字</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment"># 1,000,000</span>\n<span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment"># 1,000,000.00</span>\n<span class="token keyword">echo</span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;1000000&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;,&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 1.000.000,00</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="大小写转换" tabindex="-1"><a class="header-anchor" href="#大小写转换" aria-hidden="true">#</a> 大小写转换</h3><ul><li><code>strtolower()</code> 字符串转为小写</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello WORLD!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strtoupper()</code> 字符串转为大写</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello WORLD!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>ucfirst()</code> 字符串首字母大写</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Hello world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>ucwords()</code> 字符串每个单词首字符转为大写</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#Hello World</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="字符串查找替换" tabindex="-1"><a class="header-anchor" href="#字符串查找替换" aria-hidden="true">#</a> 字符串查找替换：</h3><ul><li><code>strlen()</code> 获取字符串长度，字节长度</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;123546&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#　6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>substr_count()</code> 某字符串出现的次数</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;I love Shanghai. Shanghai is the biggest city in china.&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//　2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>substr()</code> 截取开始位置到结束的字符串</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world&quot;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 下标从0开始截去　lo world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strstr()</code> 搜索首次出现的位置开始到末尾的字符，<code>const char*型</code>，不存在返回 false</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 下标从0开始截去　o world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strchr()</code> 截取首次出现的位置开始到末尾的字符，<code>int 型</code>，不存在返回 NULL</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strchr</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;o&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 下标从0开始截去　o world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strrchr()</code> 截取最后一次出现位置开始到末尾的字符串</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 下标从0开始截去　lo world</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>str_replace()</code>替换字符</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;world&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Shanghai&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 查，换，操作字串 Hello Shanghai!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strpos()</code> 查找字符串中某字符最先出现的位置</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>strrpos()</code> 查找字符串中某字符最后出现的位置</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Hello world!&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="去空格或其他字符" tabindex="-1"><a class="header-anchor" href="#去空格或其他字符" aria-hidden="true">#</a> 去空格或其他字符</h3><ul><li><code>trim()</code> 删除字符串两端的空格或其他预定义字符</li><li><code>rtrim()</code> 删除字符串右边的空格或其他预定义字符</li><li><code>chop()</code> rtrim()的别名</li><li><code>ltrim()</code> 删除字符串左边的空格或其他预定义字符</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;\\r\\nHello World!\\r\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Hello World!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>dirname()</code> 返回路径中的目录部分</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">echo</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;c:/test/home.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">#c:/test</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="字符串编码" tabindex="-1"><a class="header-anchor" href="#字符串编码" aria-hidden="true">#</a> 字符串编码</h3><ul><li><code>md5()</code> md5 加密</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Hello&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 8b1a9953c4611296a827abf8c47804d7</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><h3 id="内部指针" tabindex="-1"><a class="header-anchor" href="#内部指针" aria-hidden="true">#</a> 内部指针</h3><ul><li><p><code>current($arr)</code> 返回数组中的当前单元</p></li><li><p><code>pos($arr)</code> 返回数组中的当前单元</p></li><li><p><code>key($arr)</code> 返回数组中当前单元的键名</p></li><li><p><code>prev($arr)</code> 将数组中的内部指针倒回一位</p></li><li><p><code>next($arr)</code> 将数组中的内部指针向前移动一位</p></li><li><p><code>end($arr)</code> 将数组中的内部指针指向最后一个单元</p></li><li><p><code>reset($arr)</code> 将数组中的内部指针指向第一个单元</p></li><li><p><code>each($arr)</code> 将返回数组当前元素的一个键名/值的构造数组，并使数组指针向前移动一位</p></li><li><p><code>list($key,$value)=each($arr)</code> 获得数组当前元素的键名和值</p></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># $a=1,$b=2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="键-值操作" tabindex="-1"><a class="header-anchor" href="#键-值操作" aria-hidden="true">#</a> 键/值操作</h3><ul><li><code>array_keys()</code> 获得数组的键名</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Array ( [0] =&gt; 3 [1] =&gt; 4 ...)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_values()</code> 获得数组的值</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Array ( [0] =&gt; a [1] =&gt; b ...)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_flip()</code> 数组中的值与键名互换（如果有重复前面的会被后面的覆盖）</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Array ( [a] =&gt; 3 [b] =&gt; 4 ...)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_key_exists()</code> 检索给定的键名是否存在数组中</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;aa&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;aa&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;bb&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string double-quoted-string">&quot;cc&quot;</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_search()</code> 搜索数组中是否有值</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 1 返回的值数组的key</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_intersect()</code> 返回两个或多个数组的交集数组(只比较键值)</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a1</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Cat&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Dog&quot;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Horse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$a2</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Horse&quot;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Dog&quot;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">&quot;Fish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">array_intersect</span><span class="token punctuation">(</span><span class="token variable">$a1</span><span class="token punctuation">,</span><span class="token variable">$a2</span><span class="token punctuation">)</span> <span class="token comment"># Array ( [1] =&gt; Dog [2] =&gt; Horse )</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p><code>array_intersect_assoc()</code> 返回两个或多个数组的交集数组(比较键名和键值)</p></li><li><p><code>array_intersect_key()</code> 返回两个或多个数组的交集数组(只比较健名)</p></li><li><p><code>array_diff()</code> 比较数组，返回差值(只比较键值)</p></li><li><p><code>array_diff_assoc()</code> 比较数组，返回差值(比较键名和键值)</p></li><li><p><code>array_diff_key()</code> 比较数组，返回差值(只比较健名)</p></li></ul><h3 id="出栈入栈-填充清除" tabindex="-1"><a class="header-anchor" href="#出栈入栈-填充清除" aria-hidden="true">#</a> 出栈入栈(填充清除)</h3><ul><li><code>array_push()</code> 插入数组尾部</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_unshift()</code> 插入数组开头一个或多个值</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_unshift</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_pop()</code> 删除数组中的最后一个元素</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p><code>array_shift()</code> 删除数组开头的元素</p></li><li><p><code>array_splice()</code> 删除数组中的某一部分并用其它值取代</p></li><li><p><code>array_pad()</code> 用给定的值填充数组</p></li><li><p><code>array_fill()</code> 以填充数据的方式创建新数组</p></li><li><p><code>array_fill_keys()</code> 使用指定的键和值来填充数组</p></li></ul><h3 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h3><ul><li><code>array_merge()</code> 合并两个数组</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 4]</span>\n<span class="token comment">// 搭配array_flip()键值转换，键去重后再转换键值，array_merge修复数组的不正常序列</span>\n<span class="token comment">// array_flip()和array_keys()</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>array_unique()</code> 删除数组中的重复值</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">array_unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 3, 4]</span>\n<span class="token comment">// 去重后，键值会不按顺序，使用array_values把键值重新排序</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><ul><li><code>in_array()</code> 检查数组中是否存在某个值</li><li><code>array_rand()</code> 随机获取数组元素</li><li><code>shuffle()</code> 随机打乱数组</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>implode()</code> 别名<code>jion()</code>，连接数组</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39; : &#39;</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 1 : 2 : 3 : 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><code>array_sum()</code> 计算数组中所有元素的和</li><li><code>array_product()</code> 计算数组中所有元素的乘积</li><li><code>count()</code> 统计</li><li><code>sort()</code> 按键值升序排序</li><li><code>rsort()</code> 按键值逆序排序</li><li><code>asort()</code> 函数用于对数组单元从低到高进行排序并保持索引关系</li><li><code>arsort()</code> 函数用于对数组单元从高到低进行排序并保持索引关系</li><li><code>ksort()</code> 按关联数组的键名升序排序，排序的结果保留键值的关联关系</li><li><code>krsort()</code> 按关联数组的键名降序排序，排序的结果保留键值的关联关系</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c )</span>\n<span class="token function">asort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [1] =&gt; a [0] =&gt; b [2] =&gt; c )</span>\n<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token operator">=&gt;</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;a&quot;</span><span class="token operator">=&gt;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;c&quot;</span><span class="token operator">=&gt;</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># Array ( [a] =&gt; 20 [b] =&gt; 18 [c] =&gt; 25 )</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="排序算法" tabindex="-1"><a class="header-anchor" href="#排序算法" aria-hidden="true">#</a> 排序算法</h2><ul><li>冒泡</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">getpao</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">#设置一个空数组 用来接收冒出来的泡</span>\n    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">#该层循环控制 需要冒泡的轮数</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">#该层循环用来控制每轮 冒出一个数 需要比较的次数</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$i</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token variable">$tmp</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$tmp</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>快速</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">#先判断是否需要继续进行</span>\n    <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n    <span class="token comment">#如果没有返回，说明数组内的元素个数 多余1个，需要排序</span>\n\n    <span class="token comment">#选择一个标尺</span>\n\n    <span class="token comment">#选择第一个元素</span>\n    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">#遍历 除了标尺外的所有元素，按照大小关系放入两个数组内</span>\n\n    <span class="token comment">#初始化两个数组</span>\n    <span class="token variable">$left_array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#小于标尺的</span>\n    <span class="token variable">$right_array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#大于标尺的</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">&gt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">#放入左边数组</span>\n            <span class="token variable">$left_array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">#放入右边</span>\n            <span class="token variable">$right_array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n    <span class="token comment">#再分别对 左边 和 右边的数组进行相同的排序处理方式</span>\n\n    <span class="token comment">#递归调用这个函数,并记录结果</span>\n    <span class="token variable">$left_array</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$left_array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$right_array</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$right_array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">#合并左边 标尺 右边</span>\n    <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$left_array</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$right_array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><ul><li>选择</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">select_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">#实现思路 双重循环完成，外层控制轮数，当前的最小值。内层 控制的比较次数</span>\n\n    <span class="token comment">#$i 当前最小值的位置， 需要参与比较的元素</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">#先假设最小的值的位置</span>\n        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>\n\n        <span class="token comment">#$j 当前都需要和哪些元素比较，$i 后边的。</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">#$arr[$p] 是 当前已知的最小值</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">#比较，发现更小的,记录下最小值的位置；并且在下次比较时，</span>\n\n            <span class="token comment">#应该采用已知的最小值进行比较。</span>\n                <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$j</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">#已经确定了当前的最小值的位置，保存到$p中。</span>\n\n        <span class="token comment">#如果发现 最小值的位置与当前假设的位置$i不同，则位置互换即可</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">#返回最终结果</span>\n    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><ul><li>堆叠</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">heapSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#先建立最大堆</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>\n            <span class="token variable">$childIndex</span> <span class="token operator">=</span> <span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$childIndex</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment"># 在父、左子、右子中 ，找到最大的</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$childIndex</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token variable">$childIndex</span><span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>\n                <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$childIndex</span><span class="token punctuation">;</span>\n                <span class="token variable">$childIndex</span> <span class="token operator">=</span> <span class="token variable">$childIndex</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">#从最后一个元素开始调整</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>\n        <span class="token comment"># 调整第一个元素</span>\n        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token variable">$childIndex</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$childIndex</span> <span class="token operator">&lt;</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment"># 在父、左子、右子中 ，找到最大的</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$childIndex</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token variable">$i</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token variable">$childIndex</span><span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$s</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$childIndex</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>\n                <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$childIndex</span><span class="token punctuation">;</span>\n                <span class="token variable">$childIndex</span> <span class="token operator">=</span> <span class="token variable">$childIndex</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><ul><li>插入</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">insert_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">#区分 哪部分是已经排序好的</span>\n    <span class="token comment">#哪部分是没有排序的</span>\n    <span class="token comment">#找到其中一个需要排序的元素</span>\n    <span class="token comment">#这个元素 就是从第二个元素开始，到最后一个元素都是这个需要排序的元素</span>\n    <span class="token comment">#利用循环就可以标志出来</span>\n    <span class="token comment">#i循环控制 每次需要插入的元素，一旦需要插入的元素控制好了，</span>\n    <span class="token comment">#间接已经将数组分成了2部分，下标小于当前的（左边的），是排序好的序列</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">#获得当前需要比较的元素值。</span>\n        <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">#内层循环控制 比较 并 插入</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">#$arr[$i];//需要插入的元素; $arr[$j];//需要比较的元素</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$tmp</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">#发现插入的元素要小，交换位置</span>\n                <span class="token comment">#将后边的元素与前面的元素互换</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token comment">#将前面的数设置为 当前需要交换的数</span>\n                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token comment">#如果碰到不需要移动的元素</span>\n                <span class="token comment">#由于是已经排序好是数组，则前面的就不需要再次比较了。</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">#将这个元素 插入到已经排序好的序列内。</span>\n    <span class="token comment">#返回</span>\n    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li>希尔</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">shellSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$stepSize</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$stepSize</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token variable">$stepSize</span><span class="token punctuation">;</span>\n        <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">-</span> <span class="token variable">$stepSize</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token variable">$stepSize</span><span class="token punctuation">;</span>\n                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$t</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$stepSize</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">-=</span> <span class="token variable">$stepSize</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$stepSize</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span> <span class="token comment">// 缩小步长，再进行插入排序 $stepSize = floor($stepSize / 2);</span>\n        <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>并归</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">#交换函数</span>\n<span class="token keyword">function</span> <span class="token function-definition function">swap</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$b</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$b</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token comment">#归并算法总函数</span>\n<span class="token keyword">function</span> <span class="token function-definition function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$end</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token function">MSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$start</span><span class="token punctuation">,</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token comment">#MSort() 函数</span>\n<span class="token keyword">function</span> <span class="token function-definition function">MSort</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$start</span><span class="token punctuation">,</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">#当子序列长度为1时，</span>\n    <span class="token variable">$start</span> <span class="token operator">==</span> <span class="token variable">$end</span>，\n    <span class="token comment">#不用再分组</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$start</span> <span class="token operator">&lt;</span> <span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$start</span> <span class="token operator">+</span> <span class="token variable">$end</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">#将 $arr 平分为 $arr[$start - $mid] 和</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$mid</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token variable">$end</span><span class="token punctuation">]</span> <span class="token function">MSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$start</span><span class="token punctuation">,</span><span class="token variable">$mid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">#将 $arr[$start - $mid] 归并为有序的</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$start</span> <span class="token operator">-</span> <span class="token variable">$mid</span><span class="token punctuation">]</span> <span class="token function">MSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$mid</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">#将 $arr[$mid+1 - $end] 归并为有序的</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$mid</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token variable">$end</span><span class="token punctuation">]</span> <span class="token function">Merge</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$start</span><span class="token punctuation">,</span><span class="token variable">$mid</span><span class="token punctuation">,</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">#将$arr[$start - $mid]部分和$arr[$mid+1 - $end]部分合并起来成为有序的</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$start</span> <span class="token operator">-</span> <span class="token variable">$end</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">#归并操作</span>\n<span class="token keyword">function</span> <span class="token function-definition function">Merge</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$start</span><span class="token punctuation">,</span><span class="token variable">$mid</span><span class="token punctuation">,</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token variable">$start</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">=</span><span class="token variable">$mid</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$k</span> <span class="token operator">=</span> <span class="token variable">$start</span><span class="token punctuation">;</span> <span class="token variable">$temparr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">!=</span><span class="token variable">$mid</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$j</span><span class="token operator">!=</span><span class="token variable">$end</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$temparr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token variable">$temparr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">#将第一个子序列的剩余部分添加到已经排好序的 $temparr 数组中</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">!=</span> <span class="token variable">$mid</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token variable">$temparr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">#将第二个子序列的剩余部分添加到已经排好序的 $temparr 数组中</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">!=</span> <span class="token variable">$end</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token variable">$temparr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token variable">$start</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token variable">$end</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temparr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><h3 id="常用命令行" tabindex="-1"><a class="header-anchor" href="#常用命令行" aria-hidden="true">#</a> 常用命令行</h3><blockquote><p><code>php -f test.php</code> (-f 可省略) PHP 运行指定文件</p></blockquote><blockquote><p><code>php -f &quot;phpinfo();&quot;</code> 命令行直接运行； <br><code>php -r “phpinfo();”</code> | less 分页展示</p></blockquote><blockquote><p><code>php -a</code> 交互模式运行 PHP，exit 退出</p></blockquote><blockquote><p><code>php -m</code> 内置及 Zend 加载的模块</p></blockquote><blockquote><p><code>php --ini</code> 显示配置文件名</p></blockquote><blockquote><p><code>php -i</code> 等价于 phpinfo()</p></blockquote><blockquote><p><code>php -i | grep php.ini</code> 查看 php 配置文件加载路径</p></blockquote><blockquote><p><code>php –ini</code> 同上</p></blockquote><blockquote><p><code>php -v</code> 查看 php 版本</p></blockquote><blockquote><p><code>php –version</code> 同上</p></blockquote><blockquote><p><code>php –re</code> 查看是否安装相应的扩展 如 <code>php –re gd</code></p></blockquote><blockquote><p><code>php –help</code> 更多命令</p></blockquote><blockquote><p><code>service php-fpm restart</code> 重启 php</p></blockquote><blockquote><p><code>httpd -v apache</code> 查看 apache 版本号</p></blockquote><blockquote><p>重启 apache <br><code>service httpd start</code> 启动 <br><code>service httpd restart</code> 重新启动 <br><code>service httpd stop</code> 停止服务</p></blockquote><blockquote><p>apache 位置 <br><code>/etc/httpd/conf</code> 和 <code>/etc/httpd/conf.d</code></p></blockquote><h3 id="项目启动" tabindex="-1"><a class="header-anchor" href="#项目启动" aria-hidden="true">#</a> 项目启动</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># thinkphp</span>\nphp think run\n\n<span class="token comment"># laravel</span>\nphp artisan serve\n\n<span class="token comment"># yii</span>\nphp yii serve\n\n<span class="token comment">#通用</span>\nphp -S localhost:5000 -t public\n\n<span class="token comment">#vue</span>\n<span class="token function">npm</span> run dev/serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><ul><li>不限内存安装</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">COMPOSER_MEMORY_LIMIT</span><span class="token operator">=</span>-1 <span class="token function">composer</span> require barryvdh/laravel-ide-helper\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="thinkphp" tabindex="-1"><a class="header-anchor" href="#thinkphp" aria-hidden="true">#</a> ThinkPHP</h2><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">try</span><span class="token punctuation">{</span>\n    <span class="token comment">#开启</span>\n    <span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token function">startTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token operator">...</span>数据库操作\n\n    <span class="token comment">#提交</span>\n    <span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">#回滚</span>\n    <span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="laravel" tabindex="-1"><a class="header-anchor" href="#laravel" aria-hidden="true">#</a> Laravel</h2><h3 id="模型" tabindex="-1"><a class="header-anchor" href="#模型" aria-hidden="true">#</a> 模型</h3><ul><li>多对多中间表的一些常用操作</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">//查询到该分类下的关联模型进行删除</span>\n<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-&gt;</span><span class="token function">articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">syncWithoutDetaching</span><span class="token punctuation">(</span><span class="token variable">$ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存操作，已经存在的不会再插入</span>\n<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-&gt;</span><span class="token function">articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token variable">$ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只有给出数组的 ID 会被保留在中间表中</span>\n<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-&gt;</span><span class="token function">articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token variable">$ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新增，哪怕已经存在数据，还会继续插入</span>\n<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-&gt;</span><span class="token function">articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token variable">$ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反选操作最佳操作</span>\n\n<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$category</span><span class="token operator">-&gt;</span><span class="token function">articles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token variable">$ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除中间表关系</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="命令-1" tabindex="-1"><a class="header-anchor" href="#命令-1" aria-hidden="true">#</a> 命令</h3><ul><li>删除缓存路由</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>php artisan route<span class="token punctuation">:</span>clear\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h2><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h3><blockquote><p><strong>PHP7 的新特性？重点</strong></p></blockquote><ul><li>标量类型声明：PHP 7 中的函数的形参类型声明可以是标量了。在 PHP 5 中只能是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float 和 bool 了。</li><li>返回值类型声明：增加了对返回类型声明的支持。类似于参数类型声明，返回类型声明指明了函数返回值的类型。可用的类型与参数声明中可用的类型相同。</li><li>NULL 合并运算符：由于日常使用中存在大量同时使用三元表达式和 isset()的情况，NULL 合并运算符使得变量存在且值不为 NULL， 它就会返回自身的值，否则返回它的第二个操作数。</li><li>use 加强：从同一 namespace 导入的类、函数和常量现在可以通过单个 use 语句 一次性导入了</li><li>匿名类：现在支持通过 new class 来实例化一个匿名类</li></ul><blockquote><p><strong>PHP8 的新特性？</strong></p></blockquote><p><strong>最人性化的特性：命名参数、联合类型、<code>mixed</code> 类型</strong></p><ul><li>命名参数</li></ul><ol><li>仅指定必需的参数，跳过可选的参数。</li><li>参数是与顺序无关的且具有自记录功能</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">function</span> test<span class="token punctuation">(</span><span class="token variable">$name</span>, <span class="token variable">$age</span><span class="token operator">=</span><span class="token string">&#39;18&#39;</span>, <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin class-name">echo</span> <span class="token variable">$name</span> <span class="token builtin class-name">.</span> <span class="token string">&#39;-------&#39;</span> <span class="token builtin class-name">.</span> <span class="token variable">$age</span> <span class="token builtin class-name">.</span> <span class="token string">&#39;--------&#39;</span><span class="token builtin class-name">.</span> <span class="token variable">$sex</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\ntest<span class="token punctuation">(</span><span class="token string">&#39;Landy&#39;</span>, age: <span class="token number">20</span>, sex: <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Landy-------20--------女\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>跳过参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>test<span class="token punctuation">(</span><span class="token string">&#39;Landy&#39;</span>, sex: <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Landy-------18--------女\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参数的顺序可以不固定</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>test<span class="token punctuation">(</span>age: <span class="token number">30</span>, sex: <span class="token string">&#39;女&#39;</span>, name: <span class="token string">&#39;tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //tom-------30--------女\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&lt;</span>?php\nclass Person <span class="token punctuation">{</span>\n    public static <span class="token keyword">function</span> test<span class="token punctuation">(</span><span class="token variable">$name</span>, <span class="token variable">$age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span class="token builtin class-name">.</span><span class="token string">&#39;|&#39;</span><span class="token builtin class-name">.</span><span class="token variable">$age</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Person::test<span class="token punctuation">(</span>age:100, name:<span class="token string">&#39;Landy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //Landy<span class="token operator">|</span><span class="token number">100</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>还可以这样</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">function</span> test1<span class="token punctuation">(</span><span class="token variable">$arg1</span>,<span class="token variable">$arg2</span>, <span class="token punctuation">..</span>.<span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    print_r<span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\ntest1<span class="token punctuation">(</span><span class="token number">1,2</span>, name:<span class="token string">&#39;Landy&#39;</span>, age:11, sex:2<span class="token punctuation">)</span><span class="token punctuation">;</span>\nArray\n<span class="token punctuation">(</span>\n    <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Landy\n    <span class="token punctuation">[</span>age<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">11</span>\n    <span class="token punctuation">[</span>sex<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>向下不兼容，PHP8.0 后的函数都可以使用命名参数</p><ul><li>联合类型</li></ul><p>当给函数传参，参数可能有多重类型，传统 PHP7 下并不支持校验，PHP8 可以完美实现校验。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>//php7\nclass Number <span class="token punctuation">{</span>\n  /** @var int<span class="token operator">|</span>float */\n  private <span class="token variable">$number</span><span class="token punctuation">;</span>\n\n  /**\n   * @param float<span class="token operator">|</span>int <span class="token variable">$number</span>\n   */\n  public <span class="token keyword">function</span> __construct<span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$this</span>-<span class="token operator">&gt;</span>number <span class="token operator">=</span> <span class="token variable">$number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nnew Number<span class="token punctuation">(</span><span class="token string">&#39;NaN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // Ok\n\n//php8\nclass Number <span class="token punctuation">{</span>\n  public <span class="token keyword">function</span> __construct<span class="token punctuation">(</span>\n    private int<span class="token operator">|</span>float <span class="token variable">$number</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nnew Number<span class="token punctuation">(</span><span class="token string">&#39;NaN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // TypeError\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>新的 <em>mixed</em> 类型</li></ul><p>mixed 本身是以下类型之一： array bool callable int float null object resource string 注意，mixed 也可以用作参数或属性类型，而不仅仅是返回类型。</p><p>另外由于 mixed 已经包含 null，因此不允许将其设置为 nullable。以下内容将触发错误：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Fatal error: Mixed types cannot be nullable, null is already part of the mixed type.</span>\n<span class="token keyword">function</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span>: ?mixed <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>最具潜力的特性：注解、Match 表达式、WeakMap</strong></p><ul><li>注解</li></ul><p>现在可以用原生的 PHP 语法来使用结构化的元数据，而不需要再依赖 PHPDoc 解析，性能也随之提升。之前定义注解路由可能需要使用：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#PHP 7</span>\nclass PostsController\n<span class="token punctuation">{</span>\n    /**\n     * @Route<span class="token punctuation">(</span><span class="token string">&quot;/api/posts/{id}&quot;</span>, <span class="token assign-left variable">methods</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n     */\n    public <span class="token keyword">function</span> get<span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> /* <span class="token punctuation">..</span>. */ <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在你可以直接用 PHP 的注解语法来定义，并通过反射直接获取</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#PHP 8</span>\nclass PostsController\n<span class="token punctuation">{</span>\n    <span class="token comment">#[Route(&quot;/api/posts/{id}&quot;, methods: [&quot;GET&quot;])]</span>\n    public <span class="token keyword">function</span> get<span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> /* <span class="token punctuation">..</span>. */ <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>match 匹配表达式</li></ul><p>可以称它为 switch 表达式的大哥：match 可以返回值，不需要 break 语句，可以组合条件，使用严格的类型比较，并且不执行任何类型的强制。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#PHP 7</span>\nswitch <span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;8.0&#39;</span><span class="token builtin class-name">:</span>\n    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">&quot;Oh no!&quot;</span><span class="token punctuation">;</span>\n    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">8.0</span>:\n    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">&quot;This is what I expected&quot;</span><span class="token punctuation">;</span>\n    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token builtin class-name">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>\n//<span class="token operator">&gt;</span> Oh no<span class="token operator">!</span>\n\n<span class="token comment">#PHP 8.0</span>\n<span class="token builtin class-name">echo</span> match<span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token number">8.0</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;匹配8.0&#39;</span>,\n    <span class="token string">&#39;8.0&#39;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;test 8.0&#39;</span>,\n    default <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;没有匹配值&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n//<span class="token operator">&gt;</span> This is what I expecte\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>可以和表达式匹配</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token keyword">function</span> <span class="token function-name function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin class-name">return</span> <span class="token number">8.0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token builtin class-name">echo</span> match<span class="token punctuation">(</span><span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    test3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;匹配函数&#39;</span>,\n    <span class="token number">8.0</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;匹配8.0&#39;</span>,\n    <span class="token string">&#39;8.0&#39;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;test 8.0&#39;</span>,\n    <span class="token number">9,10</span>,11 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;多次匹配&#39;</span>, //多次匹配\n    default <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">&#39;没有匹配值&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n//<span class="token operator">&gt;</span> 匹配函数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>match 为强类型匹配，还有一点需要注意的是之前 match (){} 花括号后要写;，switch 是不用的。</p><ul><li>WeakMap</li></ul><p><code>WeakMap</code> 保留对对象的引用，这些引用不会阻止这些对象被垃圾回收。</p><p>以 ORM 为例，它们通常实现缓存，这些缓存保存对实体类的引用，以提高实体之间的关系性能。这些实体对象不能被垃圾回收，只要此缓存具有对它们的引用，即使缓存是唯一引用它们的对象。</p><p>如果此缓存层使用弱引用和映射代替，PHP 将垃圾收集这些对象当再没有别的引用他们了。特别是在 ORM 的情况下，它可以管理请求中的数百个，如果不是数千个实体;weak maps 可以提供更好、更资源友好的处理这些对象的方法。</p><p>下面是 weak maps 的示例：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>class Foo\n<span class="token punctuation">{</span>\n    private WeakMap <span class="token variable">$cache</span><span class="token punctuation">;</span>\n\n    public <span class="token keyword">function</span> getSomethingWithCaching<span class="token punctuation">(</span>object <span class="token variable">$obj</span><span class="token punctuation">)</span>: object\n    <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> <span class="token variable">$this</span>-<span class="token operator">&gt;</span>cache<span class="token punctuation">[</span><span class="token variable">$obj</span><span class="token punctuation">]</span>\n           ??<span class="token operator">=</span> <span class="token variable">$this</span>-<span class="token operator">&gt;</span>computeSomethingExpensive<span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>最实用的特性：构造器属性提升、Nullsafe 运算符、str_contains()、 str_starts_with()、 str_ends_with()</strong></p><ul><li>构造函数里可直接定义属性</li></ul><p>这个新的语法糖来用来创建值对象或数据传输对象。不用为类属性和构造函数指定它们，PHP 现在可以将它们合并为一个。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#php7</span>\nclass Point <span class="token punctuation">{</span>\n  public float <span class="token variable">$x</span><span class="token punctuation">;</span>\n  public float <span class="token variable">$y</span><span class="token punctuation">;</span>\n  public float <span class="token variable">$z</span><span class="token punctuation">;</span>\n\n  public <span class="token keyword">function</span> __construct<span class="token punctuation">(</span>\n    float <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">0.0</span>,\n    float <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">0.0</span>,\n    float <span class="token variable">$z</span> <span class="token operator">=</span> <span class="token number">0.0</span>,\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$this</span>-<span class="token operator">&gt;</span>x <span class="token operator">=</span> <span class="token variable">$x</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span>-<span class="token operator">&gt;</span>y <span class="token operator">=</span> <span class="token variable">$y</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span>-<span class="token operator">&gt;</span>z <span class="token operator">=</span> <span class="token variable">$z</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">#php8</span>\nclass Point <span class="token punctuation">{</span>\n  public <span class="token keyword">function</span> __construct<span class="token punctuation">(</span>\n    public float <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token number">1.0</span>,\n    public float <span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">2.0</span>,\n    public float <span class="token variable">$z</span> <span class="token operator">=</span> <span class="token number">3.0</span>,\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token builtin class-name">echo</span> <span class="token punctuation">(</span>new Point<span class="token punctuation">(</span><span class="token punctuation">))</span>-<span class="token operator">&gt;</span>x<span class="token punctuation">;</span> // <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li><code>Nullsafe</code> 空安全运算符</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>//php7\n<span class="token variable">$country</span> <span class="token operator">=</span>  null<span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$session</span> <span class="token operator">!=</span><span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$session</span>-<span class="token operator">&gt;</span>user<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">!=</span><span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token variable">$user</span>-<span class="token operator">&gt;</span>getAddress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$address</span> <span class="token operator">!=</span><span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token variable">$country</span> <span class="token operator">=</span> <span class="token variable">$address</span>-<span class="token operator">&gt;</span>country<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n//php8\n<span class="token variable">$country</span> <span class="token operator">=</span> <span class="token variable">$session</span>?-<span class="token operator">&gt;</span>user?-<span class="token operator">&gt;</span>getAddress<span class="token punctuation">(</span><span class="token punctuation">)</span>?-<span class="token operator">&gt;</span>country<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li><code>str_contains()</code>、<code>str_starts_with()</code> 和 <code>str_ends_with()</code> 函数</li></ul><p>可以不必再依赖 strpos() 来知道字符串是否包含另一个字符串了。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#PHP 7</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>strpos<span class="token punctuation">(</span><span class="token string">&#39;string with lots of words&#39;</span>, <span class="token string">&#39;words&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> /* … */ <span class="token punctuation">}</span>\n\n<span class="token comment">#PHP 8</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>str_contains<span class="token punctuation">(</span><span class="token string">&#39;string with lots of words&#39;</span>, <span class="token string">&#39;words&#39;</span><span class="token punctuation">))</span> <span class="token punctuation">{</span> /* … */ <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>str_starts_with<span class="token punctuation">(</span><span class="token string">&#39;haystack&#39;</span>, <span class="token string">&#39;hay&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token boolean">true</span>\nstr_ends_with<span class="token punctuation">(</span><span class="token string">&#39;haystack&#39;</span>, <span class="token string">&#39;stack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>函数内部一致性校验错误</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>//php7\nstrlen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // Warning: strlen<span class="token punctuation">(</span><span class="token punctuation">)</span> expects parameter <span class="token number">1</span> to be string, array given\narray_chunk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>, -1<span class="token punctuation">)</span><span class="token punctuation">;</span> // Warning: array_chunk<span class="token punctuation">(</span><span class="token punctuation">)</span>: Size parameter expected to be greater than <span class="token number">0</span>\n\n//php8\nstrlen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // TypeError: strlen<span class="token punctuation">(</span><span class="token punctuation">)</span>: Argument <span class="token comment">#1 ($str) must be of type string, array given</span>\narray_chunk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>, -1<span class="token punctuation">)</span><span class="token punctuation">;</span> // ValueError: array_chunk<span class="token punctuation">(</span><span class="token punctuation">)</span>: Argument <span class="token comment">#2 ($length) must be greater than 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>最具贡献的特性：JIT</strong></p><p>JIT 作为 PHP 底层编译引擎，对于 PHP8 的性能贡献是非常之大，不过对于常规 WEB 应用来说，优势不明显，但仍然是非常的高大上特性，是 PHP8 的扛鼎之作。</p><p>PHP 8 引入了两个即时编译引擎。 Tracing JIT 在两个中更有潜力，它在综合基准测试中显示了三倍的性能， 并在某些长时间运行的程序中显示了 1.5-2 倍的性能改进。 典型的应用性能则和 PHP 7.4 不相上下。</p><p><strong>其它特性</strong></p><ul><li>字符串和数字比较</li></ul><p>在 php8 中，数字和字符串比较时，会将数字转成字符串，正好和之前相反。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>//php7\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;foobar&#39;</span> // <span class="token boolean">true</span>\n\n//php8\n<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;foobar&#39;</span> // <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>可以在对象上使用::class</li></ul><p>一个小而有用的新特性：现在可以对对象使用<code>::class</code>，它的工作方式与 <code>get_class()</code> 相同。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">$foo</span> <span class="token operator">=</span> new Foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nvar_dump<span class="token punctuation">(</span><span class="token variable">$foo</span>::class<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>traits 中的抽象方法改进</li></ul><p>Traits 可以指定抽象方法，这些方法必须由使用它们的类实现。在 PHP8，必须保持一致的方法定义，包括参数类型和返回类型。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>trait MyTrait <span class="token punctuation">{</span>\n    abstract private <span class="token keyword">function</span> neededByTheTrait<span class="token punctuation">(</span><span class="token punctuation">)</span>: string<span class="token punctuation">;</span>\n\n    public <span class="token keyword">function</span> <span class="token function-name function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> strlen<span class="token punctuation">(</span><span class="token variable">$this</span>-<span class="token operator">&gt;</span>neededByTheTrait<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nclass TraitUser <span class="token punctuation">{</span>\n    use MyTrait<span class="token punctuation">;</span>\n\n    // This is allowed:\n    private <span class="token keyword">function</span> neededByTheTrait<span class="token punctuation">(</span><span class="token punctuation">)</span>: string <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n    // This is forbidden <span class="token punctuation">(</span>incorrect <span class="token builtin class-name">return</span> <span class="token builtin class-name">type</span><span class="token punctuation">)</span>\n    private <span class="token keyword">function</span> neededByTheTrait<span class="token punctuation">(</span><span class="token punctuation">)</span>: stdClass <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n    // This is forbidden <span class="token punctuation">(</span>non-static changed to static<span class="token punctuation">)</span>\n    private static <span class="token keyword">function</span> neededByTheTrait<span class="token punctuation">(</span><span class="token punctuation">)</span>: string <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="引用变量" tabindex="-1"><a class="header-anchor" href="#引用变量" aria-hidden="true">#</a> 引用变量</h3><blockquote><p><strong>什么是引用变量?在 PHP 当中，用什么符号定义引用变量</strong></p></blockquote><p><strong>考点</strong>：PHP 的引用变量的概念及定义方式</p><ul><li>概念：在 PHP 中引用意味着用不同的名字访问同一个变量内容；定义方式：使用<code>&amp;</code>符号</li></ul><p><strong>延伸</strong>：PHP 引用变量的原理</p><ol><li>看看不引用的情况是这样子：</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> “hello world”<span class="token punctuation">;</span><span class="token comment">//定义一个变量，下面赋值给$b</span>\n<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment">//这一步没有在$a之前加符号&amp;，像这样子”$b= &amp; $a”。没有加&amp;，实际上原理是会将变量$a复制拷贝一份，也就是内存中重新申请一个地址存储变量$b了</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>使用符号&amp;进行引用</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> “hello world”<span class="token punctuation">;</span>\n<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> <span class="token variable">$a</span><span class="token punctuation">;</span> <span class="token comment">//使用引用，php引擎不会拷贝一份变量，其实就是将指针指向了$a在内存中的地址，$b中就是保存了这个指针。把$b的值改变，$a也会跟着改变</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>销毁变量的时候。并不会改变原来的值。</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;d&#39;</span><span class="token punctuation">;</span>\n<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> <span class="token variable">$a</span><span class="token punctuation">;</span>\n<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// 因为是引用了，所以把b的值改掉，a的值也跟着改为8了。</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  调用unset删除b变量，a变量不会删除</span>\n<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出null和8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>为了避免把$b给删掉，造成把$a 也给删掉，调用 unset 删除$b变量的时候，php引擎从变量符号表中发现：要删除的变量$b 原来是引用了变量$a,就先把$a 变量拷贝一份后再删除$b 变量。</p><h3 id="常量及数据类型" tabindex="-1"><a class="header-anchor" href="#常量及数据类型" aria-hidden="true">#</a> 常量及数据类型</h3><blockquote><p><strong>PHP 中字符串可以使用哪三种定义方法以及各自的区别是什么</strong></p></blockquote><p><strong>考点</strong>：PHP 的字符串的定义方式及各自区别</p><ul><li><p>定义方式：单引号，双引号，heredoc 和 newdoc</p></li><li><p>区别：</p></li></ul><ol><li>单引号不能解析变量，不能解析转义字符，只能解析单引号和反斜线本身，变量之间、变量和字符串、字符串之间可以用<code>.</code>连接，<strong>效率更高</strong></li><li>双引号可以解析变量，变量可以使用特殊字符和<code>{}</code>包含，双引号 <code>key</code> 解析所有转义字符，也可以.连接</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT * FROM user WHERE name = &#39;<span class="token interpolation"><span class="token variable">$name</span></span>&#39;&quot;</span><span class="token punctuation">;</span>\n<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;SELECT * FROM user WHERE name = \\&#39;&#39;</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;\\&#39;&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li><code>heredoc</code> 类似双引号，<code>newdoc</code> 类似单引号。处理大文本(方便输出 HTML 代码)</li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">;</span>\n<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOT</span>\n&lt;p&gt;<span class="token interpolation"><span class="token variable">$a</span></span>&lt;/p&gt;\n<span class="token delimiter symbol">EOT<span class="token punctuation">;</span></span></span>\n<span class="token comment">// hello</span>\n\n<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string nowdoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;&#39;</span>EOT<span class="token punctuation">&#39;</span></span>\n&lt;p&gt;$a&lt;/p&gt;\n<span class="token delimiter symbol">EOT<span class="token punctuation">;</span></span></span>\n<span class="token comment">//$a</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>延伸</strong>：数据类型及常量</p><ul><li>三大数据类型（标量、复合、特殊）</li></ul><ol><li>浮点类型不能运用到比较运算中</li><li>布尔类型 FALSE 的七种情况：<code>0</code>,<code>0.0</code>,<code>&#39;&#39;</code>，<code>&#39;0&#39;</code>,<code>false</code>,<code>array()</code>,<code>NULL</code></li><li>数组类型<strong>超全局变量</strong>：<code>$GGLOBALS</code>(包含了后面全部)、<code>$_GET</code>、<code>$_POST</code>、<code>$_REQUERST</code>(包含了 G、P、C，少用) <code>$_SESSION</code>(重点)、<code>$_COOKIE</code>、<code>$_SERVER</code>、<code>$_FILES</code>、<code>$_ENV</code></li></ol><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;SERVER_ADDR&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 服务端ip地址</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;SERVER_NAME&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 服务器名称</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;REQUEST_TIME&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 请求时间戳</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;QUERY_STRING&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 当前执行脚本的文件名，域名后的信息</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;HTTP_PEFERER&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 上级请求页面</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;HTTP_USER_AGENT&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 用户代理的信息</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 客户端ip地址</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;REQUEST_URI&#39;</span><span class="token punctuation">]</span> <span class="token comment"># URI 用来指定要访问的页面。例如 “/index.html”</span>\n<span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;PATH_INFO&#39;</span><span class="token punctuation">]</span> <span class="token comment"># 路由</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li>NULL 三种情况：直接赋值为 NULL、未定义的变量，unset 销毁的变量</li><li>常量一经定义，不能被修改，不能被删除，定义方式：<br> <code>const</code>(更快，语言结构，能定义类常量)、<code>define</code>(函数，不能定义类常量)</li></ol><ul><li>预定义常量：</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment"># 返回当前...</span>\n<span class="token constant">__FILE__</span> <span class="token comment"># 文件的完整路径和文件名</span>\n<span class="token constant">__LINE__</span> <span class="token comment"># 执行行数</span>\n<span class="token constant">__DIR__</span> <span class="token comment"># 文件所在目录的路径</span>\n<span class="token constant">__FUNCTION__</span> <span class="token comment"># 方法名</span>\n<span class="token constant">__CLASS__</span> <span class="token comment"># 类名称</span>\n<span class="token constant">__TRAIT__</span> <span class="token comment"># 映射类</span>\n<span class="token constant">__METHOD__</span> <span class="token comment"># 类名::方法名</span>\n<span class="token constant">__NAMESPACE__</span> <span class="token comment"># 空间名</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p><strong>用 PHP 写出显示客户端 IP 和服务端 IP 的代码</strong></p></blockquote><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><blockquote><p><strong>foo()和@foo()之间的区别</strong></p></blockquote><p><strong>考点</strong>：PHP 的运算符的错误控制符@</p><ul><li>PHP 支持一个错误运算符：<code>@</code>。当将其放置在一个 PHP 表达式之前，该表达式可能产生的<strong>任何错误</strong>信息都被<strong>忽略掉</strong></li></ul><p><strong>延伸</strong>：PHP 的所有运算符，运算符的优先级，比较运算符，递增/递减运算符，逻辑运算符</p><ul><li>运算符的优先级</li></ul><p><strong>递增/递减</strong>&gt;!&gt;<strong>算术运算符</strong>&gt;<strong>大小比较</strong>&gt;(不)相等比较&gt;引用&gt;位运算符(|)&gt;<strong>逻辑与</strong>&gt;<strong>逻辑或</strong>&gt;<strong>三木</strong>&gt;<strong>赋值</strong>&gt;and&gt;xor&gt;or</p><ul><li>比较运算符</li></ul><blockquote><p><strong>==和===的区别</strong></p></blockquote><ol><li>==判断值，===判断值和类型</li><li>等值判断 FALSE 的七种情况都是等值</li></ol><ul><li>递增/递减运算符</li></ul><ol><li>递增/递减运算符不影响布尔值</li><li>递减 NULL 值没有效果，递增 NULL 值为 1</li><li>递增/递减在前先运算后返回，在后先返回再运算</li></ol><ul><li>逻辑运算符</li></ul><ol><li>短路作用</li><li>||和&amp;&amp;与 or 和 and 的优先级不同</li></ol><p><strong>总结</strong>：递增/递减运算符的运算效果，逻辑运算符短路效果。看到逻辑运算符要考虑优先级</p><h3 id="流程控制" tabindex="-1"><a class="header-anchor" href="#流程控制" aria-hidden="true">#</a> 流程控制</h3><blockquote><p><strong>请列出 3 种 PHP 数组循环操作的语法，并注明各种循环的区别</strong></p></blockquote><p><strong>考点</strong>：PHP 的遍历数组的三种方式及各自区别</p><ol><li><code>for</code> 循环：只能遍历数组</li><li><code>foreach</code>：遍历索引和关联数组，会 <code>reset()</code></li><li><code>while()、list()、each()</code>组合循环：遍历索引和关联数组，不会 <code>reset()</code></li></ol><p><strong>延伸</strong>：分支结构</p><ul><li>if……elseif</li></ul><ol><li>在 <code>elseif</code> 语句中只能一个表达式为 <code>true</code>，即在 <code>elseif</code> 语句中只能有一个语句块被执行，多个 <code>elseif</code> 从句是排斥关系</li><li>原则：优先范围小的条件放前面</li></ol><ul><li>switch……case</li></ul><ol><li>控制表达式的数据只能是整型、浮点或者字符串</li><li><code>countinue</code> 语句作用到 <code>switch</code> 的作用类似于 <code>break</code></li><li>跳出 <code>switch</code> 外的循环，可以使用 <code>countiune2</code></li></ol><p><strong>总结</strong></p><ol><li>理解循环内部机制，记忆 <code>foreach</code> 的 <code>reset()</code>特性</li><li>理解 <code>switch……case</code> 的执行步骤(效率)</li></ol><h3 id="自定义函数和内部函数" tabindex="-1"><a class="header-anchor" href="#自定义函数和内部函数" aria-hidden="true">#</a> 自定义函数和内部函数</h3><blockquote><p><strong>写出程序的输出结果</strong></p></blockquote><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function-definition function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment">#NULL 局</span>\n    <span class="token keyword">return</span> <span class="token variable">$count</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">#1</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">echo</span> <span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment">#5</span>\n<span class="token operator">++</span><span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token comment">#6</span>\n\n<span class="token keyword">echo</span> <span class="token function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#NULL 不输出</span>\n<span class="token keyword">echo</span> <span class="token function">get_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#1</span>\n\n<span class="token comment">// 5 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>考点</strong>：变量的作用域和静态变量</p><ul><li><p>变量的作用域也称变量的范围（上下文背景）。大部分 <code>PHP</code> 变量只有一个单独的范围。这个单独的范围跨度同样包含了 <code>include</code> 和 <code>require</code> 引入的文件</p></li><li><p>$GLOBLAS 和其他超全数组</p></li><li><p>静态变量仅在局部函数域中存在，但当程序执行离开此作用域时，其值并不会消失</p><ul><li>static 关键字</li></ul><ol><li>仅初始化一次</li><li>初始化时需要赋值</li><li>每次执行函数该值会保留</li><li><code>static</code> 修饰的变量是局部的，仅在函数内部有效</li><li>可以记录函数的调用次数，从而可以在某些条件下终止递归</li></ol></li></ul><p><strong>延伸</strong>：函数的参数及参数引用传递，函数的返回值及引用返回，外部文件的导入，系统内置函数</p><ul><li>函数的参数</li></ul><ol><li>默认情况下。函数参数通过值传递引用传递</li><li>需允许函数修改它的值，必须通过引用传递参数(&amp;参数)</li></ol><ul><li>函数的返回值</li></ul><ol><li>值通过使用可选的返回语句（return）返回</li><li>可以返回包括数据和对象的任意类型</li><li>返回语句会终止函数执行，将控制权交回函数调用处</li><li>省略 <code>return</code>，返回值为 <code>NULL</code>，不可有多个返回值</li></ol><ul><li>函数的引用返回</li></ul><p>从函数返回一个引用，必须在函数声明和指派返回值给一个变量时都使用运算符&amp;</p><ul><li>外部文件的导入</li></ul><ol><li><code>include/require</code> 语句包含并运行指定文件</li><li>如果给出路径名按照路径找，否则从 <code>include_path</code> 中查找</li><li>如果 <code>include_path</code> 没有，则从调用脚本文件所在的目录和当前工作目录下找</li><li>当一个文件被包含时，其中所包含的代码继承了 <code>include</code> 所在行的变量范围</li><li><strong>加载过程中未找到文件则 include 结构会发出一条警告；require 会发出一个致命错误</strong></li></ol><p><code>require</code> 在出错时产生 <code>E_COMPILE_ERROR</code> 级别的错误导致脚边中止，而 <code>include</code> 只产生警告 <code>E_WARNING</code>，脚边会继续运行</p><ol start="6"><li><code>require(include)</code>/<code>require_once(include_once)</code>区别是加了 once，PHP 会检查改文件是否被包含过，如果是则不会再次包含</li></ol><ul><li>系统内置函数</li></ul><ol><li><a href="#%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F">时间日期</a></li><li>IP 处理 ip2long() long2ip()</li><li>打印处理 <ul><li>语言结构：只能打印简单类型(如 int,string)，不需要圆括号 <ul><li><code>print</code> 有返回值 1，只能输出一个变量</li><li><code>echo</code> 没有返回值。可输出多个变量(分号隔开)</li></ul></li><li>函数： <ul><li><code>printf()</code> 有返回值，返回值是打印内容的长度，把文字格式化以后输出</li><li><code>sprintf()</code> 跟 printf 相似，但不打印，而是返回格式化后的文字</li><li><code>print_r()</code> 可打印复合类型，例如：stirng、int、float、array、object 等，输出 array 时，将会结构显示键和元素。print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处</li><li><code>var_dump()</code> 输出变量的内容、类型或字符串的内容、类型、长度。常用来调试</li><li><code>var_export()</code> 输出或返回一个变量的字符串表示</li></ul></li></ul></li><li>序列化及反序列化 <ul><li>一般用做缓存 <ul><li><code>serialize()</code> 用于序列化对象或数组</li><li><code>unserialize()</code> 返回原始的数据结构</li></ul></li><li>延伸：<code>json_encode()</code> 对变量进行 JSON 编码， <code>json_decode()</code> 对 JSON 数据进行解码</li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串处理</a></li><li><a href="#%E6%95%B0%E7%BB%84">数组处理</a></li></ol><p><strong>总结</strong>：着重记忆 PHP 函数的定义相关内容，理解变量的作用域、静态变量、函数的参数和返回值相关内容，重点记忆内置函数</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$var1</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">foo</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$my_var</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">global</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>\n    <span class="token variable">$var1</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n    <span class="token variable">$my_var</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$my_var</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token variable">$my_var</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$my_var</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$var2</span><span class="token punctuation">;</span>\n<span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token variable">$my_var</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">echo</span> <span class="token variable">$bar</span><span class="token punctuation">(</span><span class="token variable">$my_var</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 4</span>\n<span class="token comment">// 8</span>\n<span class="token comment">// 7104</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h3><ul><li>正则表达式的作用：查找，分割，匹配，替换，</li><li>符号</li><li>pre 函数</li></ul><h3 id="文件及目录处理" tabindex="-1"><a class="header-anchor" href="#文件及目录处理" aria-hidden="true">#</a> 文件及目录处理</h3><ul><li>文件处理函数</li><li>目录处理函数</li><li>读 写 删 打开 类型</li></ul><h3 id="会话控制" tabindex="-1"><a class="header-anchor" href="#会话控制" aria-hidden="true">#</a> 会话控制</h3><ul><li>cookie 和 seesion 的原理</li><li>session 的存储(同步)，设置</li><li>http 请求方式，请求头信息，请求体信息</li><li>GET 和 POST</li></ul><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h3><ul><li>封装，继承，多态(parent)</li><li>抽象类和接口的定义</li><li>魔术方法</li></ul><h3 id="网络协议" tabindex="-1"><a class="header-anchor" href="#网络协议" aria-hidden="true">#</a> 网络协议</h3><ul><li>HTTP 和 HTTPS</li><li>七层协议：物理，链路，网络 传输（TCP/IP），会话，表示，应用（HTTP）</li><li>邮件协议，邮局协议，。。。</li></ul><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h3><ul><li>版本控制集中式(svn)和分布式(git)</li><li>PHP 运行原理</li><li>CGI FasCGI PHP-FMP</li><li>ini 配置</li></ul>',319),e={render:function(n,s){return p}}}}]);